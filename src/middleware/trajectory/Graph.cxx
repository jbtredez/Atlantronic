#include "Graph.h"
#include <math.h>

//! Le tableau graph_link doit être trié et il doit y avoir un liens dans chaque sens (avec la même distance)
//! Il doit être cohérent avec le tableau de noeud qui indique l'id de début des liens connectés au noeud et la taille
//! Il y a redondance des donées pour permettre un traitement plus simple et plus rapide
//! Les tableaux graph_node et graph_link sont générés automatiquement (cf graph_gen) pour eviter les erreurs
//!< noeuds du graph
const struct GraphNode Graph::m_graphNode[GRAPH_NUM_NODE] =
{
	{Vect2( -1200.00f,  -600.00f),  0,  3},
	{Vect2(  1200.00f,  -600.00f),  3,  3},
	{Vect2(  -900.00f,  -800.00f),  6,  4},
	{Vect2(   900.00f,  -800.00f), 10,  4},
	{Vect2(  -450.00f,  -800.00f), 14,  5},
	{Vect2(   450.00f,  -800.00f), 19,  5},
	{Vect2( -1200.00f,  -300.00f), 24,  4},
	{Vect2(  1200.00f,  -300.00f), 28,  4},
	{Vect2(  -900.00f,  -500.00f), 32,  7},
	{Vect2(   900.00f,  -500.00f), 39,  7},
	{Vect2(  -400.00f,  -450.00f), 46,  7},
	{Vect2(   400.00f,  -450.00f), 53,  7},
	{Vect2(  -550.00f,  -200.00f), 60,  4},
	{Vect2(   550.00f,  -200.00f), 64,  4},
	{Vect2(  -950.00f,  -150.00f), 68,  6},
	{Vect2(   950.00f,  -150.00f), 74,  6},
	{Vect2(  -750.00f,    50.00f), 80,  4},
	{Vect2(   750.00f,    50.00f), 84,  4},
	{Vect2( -1100.00f,   100.00f), 88,  5},
	{Vect2(  1100.00f,   100.00f), 93,  5},
	{Vect2(  -800.00f,   350.00f), 98,  6},
	{Vect2(   800.00f,   350.00f), 104,  6},
	{Vect2( -1100.00f,   500.00f), 110,  3},
	{Vect2(  1100.00f,   500.00f), 113,  3},
	{Vect2(  -900.00f,   750.00f), 116,  3},
	{Vect2(   900.00f,   750.00f), 119,  3},
	{Vect2(  -550.00f,   400.00f), 122,  4},
	{Vect2(   550.00f,   400.00f), 126,  4},
	{Vect2(  -630.00f,   600.00f), 130,  5},
	{Vect2(   630.00f,   600.00f), 135,  5},
	{Vect2(  -200.00f,   450.00f), 140,  5},
	{Vect2(   200.00f,   450.00f), 145,  5},
	{Vect2(  -200.00f,   750.00f), 150,  5},
	{Vect2(   200.00f,   750.00f), 155,  5},
	{Vect2(     0.00f,  -800.00f), 160,  5},
	{Vect2(     0.00f,  -500.00f), 165,  5},
};

//!< liens du graph.
const struct GraphLink Graph::m_graphLink[GRAPH_NUM_LINK] =
{
	{ 0,  2,  361, -0.588003f},
	{ 0,  6,  300,  1.570796f},
	{ 0,  8,  316,  0.321751f},
	{ 1,  3,  361, -2.553590f},
	{ 1,  7,  300,  1.570796f},
	{ 1,  9,  316,  2.819842f},
	{ 2,  0,  361,  2.553590f},
	{ 2,  4,  450,  0.000000f},
	{ 2,  8,  300,  1.570796f},
	{ 2, 10,  610,  0.610726f},
	{ 3,  1,  361,  0.588003f},
	{ 3,  5,  450,  3.141593f},
	{ 3,  9,  300,  1.570796f},
	{ 3, 11,  610,  2.530867f},
	{ 4,  2,  450,  3.141593f},
	{ 4,  8,  541,  2.553590f},
	{ 4, 10,  354,  1.428899f},
	{ 4, 34,  450,  0.000000f},
	{ 4, 35,  541,  0.588003f},
	{ 5,  3,  450,  0.000000f},
	{ 5,  9,  541,  0.588003f},
	{ 5, 11,  354,  1.712693f},
	{ 5, 34,  450,  3.141593f},
	{ 5, 35,  541,  2.553590f},
	{ 6,  0,  300, -1.570796f},
	{ 6,  8,  361, -0.588003f},
	{ 6, 14,  292,  0.540420f},
	{ 6, 18,  412,  1.325818f},
	{ 7,  1,  300, -1.570796f},
	{ 7,  9,  361, -2.553590f},
	{ 7, 15,  292,  2.601173f},
	{ 7, 19,  412,  1.815775f},
	{ 8,  0,  316, -2.819842f},
	{ 8,  2,  300, -1.570796f},
	{ 8,  4,  541, -0.588003f},
	{ 8,  6,  361,  2.553590f},
	{ 8, 10,  502,  0.099669f},
	{ 8, 12,  461,  0.708626f},
	{ 8, 14,  354,  1.712693f},
	{ 9,  1,  316, -0.321751f},
	{ 9,  3,  300, -1.570796f},
	{ 9,  5,  541, -2.553590f},
	{ 9,  7,  361,  0.588003f},
	{ 9, 11,  502,  3.041924f},
	{ 9, 13,  461,  2.432966f},
	{ 9, 15,  354,  1.428899f},
	{10,  2,  610, -2.530867f},
	{10,  4,  354, -1.712693f},
	{10,  8,  502, -3.041924f},
	{10, 12,  292,  2.111216f},
	{10, 14,  626,  2.642246f},
	{10, 34,  532, -0.718830f},
	{10, 35,  403, -0.124355f},
	{11,  3,  610, -0.610726f},
	{11,  5,  354, -1.428899f},
	{11,  9,  502, -0.099669f},
	{11, 13,  292,  1.030377f},
	{11, 15,  626,  0.499347f},
	{11, 34,  532, -2.422763f},
	{11, 35,  403, -3.017238f},
	{12,  8,  461, -2.432966f},
	{12, 10,  292, -1.030377f},
	{12, 14,  403,  3.017238f},
	{12, 16,  320,  2.245537f},
	{13,  9,  461, -0.708626f},
	{13, 11,  292, -2.111216f},
	{13, 15,  403,  0.124355f},
	{13, 17,  320,  0.896055f},
	{14,  6,  292, -2.601173f},
	{14,  8,  354, -1.428899f},
	{14, 10,  626, -0.499347f},
	{14, 12,  403, -0.124355f},
	{14, 16,  283,  0.785398f},
	{14, 18,  292,  2.111216f},
	{15,  7,  292, -0.540420f},
	{15,  9,  354, -1.712693f},
	{15, 11,  626, -2.642246f},
	{15, 13,  403, -3.017238f},
	{15, 17,  283,  2.356194f},
	{15, 19,  292,  1.030377f},
	{16, 12,  320, -0.896055f},
	{16, 14,  283, -2.356194f},
	{16, 18,  354,  2.999696f},
	{16, 20,  304,  1.735945f},
	{17, 13,  320, -2.245537f},
	{17, 15,  283, -0.785398f},
	{17, 19,  354,  0.141897f},
	{17, 21,  304,  1.405648f},
	{18,  6,  412, -1.815775f},
	{18, 14,  292, -1.030377f},
	{18, 16,  354, -0.141897f},
	{18, 20,  391,  0.694738f},
	{18, 22,  400,  1.570796f},
	{19,  7,  412, -1.325818f},
	{19, 15,  292, -2.111216f},
	{19, 17,  354, -2.999696f},
	{19, 21,  391,  2.446854f},
	{19, 23,  400,  1.570796f},
	{20, 16,  304, -1.405648f},
	{20, 18,  391, -2.446854f},
	{20, 22,  335,  2.677945f},
	{20, 24,  412,  1.815775f},
	{20, 26,  255,  0.197396f},
	{20, 28,  302,  0.973620f},
	{21, 17,  304, -1.735945f},
	{21, 19,  391, -0.694738f},
	{21, 23,  335,  0.463648f},
	{21, 25,  412,  1.325818f},
	{21, 27,  255,  2.944197f},
	{21, 29,  302,  2.167973f},
	{22, 18,  400, -1.570796f},
	{22, 20,  335, -0.463648f},
	{22, 24,  320,  0.896055f},
	{23, 19,  400, -1.570796f},
	{23, 21,  335, -2.677945f},
	{23, 25,  320,  2.245537f},
	{24, 20,  412, -1.325818f},
	{24, 22,  320, -2.245537f},
	{24, 28,  309, -0.507098f},
	{25, 21,  412, -1.815775f},
	{25, 23,  320, -0.896055f},
	{25, 29,  309, -2.634494f},
	{26, 20,  255, -2.944197f},
	{26, 28,  215,  1.951303f},
	{26, 30,  354,  0.141897f},
	{26, 32,  495,  0.785398f},
	{27, 21,  255, -0.197396f},
	{27, 29,  215,  1.190290f},
	{27, 31,  354,  2.999696f},
	{27, 33,  495,  2.356194f},
	{28, 20,  302, -2.167973f},
	{28, 24,  309,  2.634494f},
	{28, 26,  215, -1.190290f},
	{28, 30,  455, -0.335639f},
	{28, 32,  455,  0.335639f},
	{29, 21,  302, -0.973620f},
	{29, 25,  309,  0.507098f},
	{29, 27,  215, -1.951303f},
	{29, 31,  455, -2.805954f},
	{29, 33,  455,  2.805954f},
	{30, 26,  354, -2.999696f},
	{30, 28,  455,  2.805954f},
	{30, 31,  400,  0.000000f},
	{30, 32,  300,  1.570796f},
	{30, 33,  500,  0.643501f},
	{31, 27,  354, -0.141897f},
	{31, 29,  455,  0.335639f},
	{31, 30,  400,  3.141593f},
	{31, 32,  500,  2.498091f},
	{31, 33,  300,  1.570796f},
	{32, 26,  495, -2.356194f},
	{32, 28,  455, -2.805954f},
	{32, 30,  300, -1.570796f},
	{32, 31,  500, -0.643501f},
	{32, 33,  400,  0.000000f},
	{33, 27,  495, -0.785398f},
	{33, 29,  455, -0.335639f},
	{33, 30,  500, -2.498091f},
	{33, 31,  300, -1.570796f},
	{33, 32,  400,  3.141593f},
	{34,  4,  450,  3.141593f},
	{34,  5,  450,  0.000000f},
	{34, 10,  532,  2.422763f},
	{34, 11,  532,  0.718830f},
	{34, 35,  300,  1.570796f},
	{35,  4,  541, -2.553590f},
	{35,  5,  541, -0.588003f},
	{35, 10,  403,  3.017238f},
	{35, 11,  403,  0.124355f},
	{35, 34,  300, -1.570796f},
};
int Graph::dijkstra(int a, int b)
{
	int i;
	int j;

	// init
	for( i=0 ; i < GRAPH_NUM_NODE; i++)
	{
		m_info[i].dist = 0xFFFF;
		m_info[i].prev_node = a;
		m_info[i].is_best = 0;
	}

	// a est a une distance de 0 de lui même et il n'y a pas mieux
	m_info[a].dist = 0;
	i = a;

	while( i != b)
	{
		m_info[i].is_best = 1;

		int max = m_graphNode[i].link_id + m_graphNode[i].link_num;
		for(j = m_graphNode[i].link_id; j < max; j++)
		{
			if( m_validLinks[j])
			{
				int connected_node = m_graphLink[j].b;
				// calcul de la distance en passant par la
				uint16_t dist = m_info[i].dist + m_graphLink[j].dist;
				if( m_info[connected_node].dist > dist)
				{
					// on a trouvé un chemin plus court pour aller vers "connected_node"
					m_info[connected_node].dist = dist;
					m_info[connected_node].prev_node = i;
				}
			}
		}

		uint16_t best_dist = 0xFFFF;
		i = a;
		for(j = 0; j<GRAPH_NUM_NODE; j++)
		{
			if( ! m_info[j].is_best && m_info[j].dist < best_dist)
			{
				best_dist = m_info[j].dist;
				i = j;
			}
		}
		if(i == a)
		{
			// rien de trouvé
			return -1;
		}
	}

	m_info[i].is_best = 1;

	// on met le chemin dans l'ordre de a vers b dans le tableau m_way
	m_wayCount = 2;
	i = b;
	while(m_info[i].prev_node != a)
	{
		i = m_info[i].prev_node;
		m_wayCount++;
	}

	m_way[0] = a;
	j = m_wayCount - 1;
	m_way[j] = b;
	i = b;
	while(m_info[i].prev_node != a)
	{
		i = m_info[i].prev_node;
		j--;
		m_way[j] = i;
	}

	// affichage debug
	/*for(i=0; i < m_wayCount; i++)
	{
		log_format(LOG_INFO, "chemin - graph : %d : %d", i, m_way[i]);
	}*/

	return 0;
}

int Graph::computeNodeDistance(struct Vect2 pos, struct GraphNodeDist* node_dist )
{
	int i;
	int j;
	float dx;
	float dy;
	uint16_t dist;

	for(i = 0; i< GRAPH_NUM_NODE; i++)
	{
		dx = pos.x - m_graphNode[i].pos.x;
		dy = pos.y - m_graphNode[i].pos.y;
		dist = (uint16_t)sqrtf(dx * dx + dy * dy);

		j = i-1;
		while(j >= 0 && node_dist[j].dist > dist)
		{
			node_dist[j+1] = node_dist[j];
			j--;
		}
		node_dist[j+1].dist = dist;
		node_dist[j+1].id = i;
	}

	return 0;
}
